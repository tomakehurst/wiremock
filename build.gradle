buildscript {
	//def githubBase = 'https://github.com/valkolovos/gradle_cobertura/raw/master/ivy'
    //apply from: "${githubBase}/gradle_cobertura/gradle_cobertura/1.0-rc4/coberturainit.gradle"

	repositories {
    	mavenRepo url:['https://oss.sonatype.org']
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

sourceCompatibility = 1.6
group = 'com.github.tomakehurst'
version = 1.27

repositories {
	mavenCentral()
	mavenLocal()
}

configurations {
	provided
}

dependencies {
	compile "org.mortbay.jetty:jetty:6.1.26"
	compile "com.google.guava:guava:13.0.1"
	compile "org.codehaus.jackson:jackson-core-asl:1.8.5", "org.codehaus.jackson:jackson-mapper-asl:1.8.5"
	compile "org.apache.httpcomponents:httpclient:4.1.2"
	compile "log4j:log4j:1.2.16"
	compile "net.sf.jopt-simple:jopt-simple:4.3"
	compile "junit:junit:4.8.2"

	provided "junit:junit:4.8.2"

	testCompile "junit:junit:4.8.2"
	testCompile "org.hamcrest:hamcrest-all:1.1"
	testCompile "org.jmock:jmock:2.5.1"
	testCompile ("org.jmock:jmock-junit4:2.5.1") {
		exclude group: "junit", module: "junit-dep"
	}
	testCompile "net.sf.json-lib:json-lib:2.4:jdk15"
	testCompile "com.googlecode.jarjar:jarjar:1.3"
}


sourceSets {
	main { compileClasspath += configurations.provided }
}

eclipse {
	classpath {
		plusConfigurations += configurations.provided
	}
}

task "create-dirs" << {
   sourceSets.all*.java.srcDirs*.each { it.mkdirs() }
   sourceSets.all*.resources.srcDirs*.each { it.mkdirs() }
}

jar {
    manifest {
        attributes("Main-Class": "com.github.tomakehurst.wiremock.WireMockServerRunner")
    }
}

task jarAll(type: Jar, dependsOn: jar) {
    inputs.files jar.archivePath
    appendix = 'standalone'
    metaInfDir = "$buildDir/tmp/manifest"
    def jar = project.tasks.jar
	File jarFile = new File(jar.destinationDir, jar.archiveName - ("." + jar.extension) + "-standalone." + jar.extension)
    doFirst {
    	manifest.writeTo("$metaInfDir/MANIFEST.MF")
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.testCompile.asPath
            jarjar(jarfile: jarFile, manifest: "$metaInfDir/MANIFEST.MF") {
                zipfileset(src: jar.archivePath)

                configurations.compile.files.each {
                	zipfileset(src: it)
                }
                rule pattern: "org.mortbay.**", result: "wiremock.org.mortbay.@1"
                rule pattern: "com.google.common.**", result: "wiremock.com.google.common.@1"
                rule pattern: "org.codehaus.jackson.**", result: "wiremock.org.codehaus.jackson.@1"
                rule pattern: "org.apache.http.**", result: "wiremock.org.apache.http.@1"
            }
        }

        Date date = new Date()
		String name = jar.baseName
        project.artifacts.add('archives',
			[
				getClassifier: { -> "standalone" },
				getDate: {-> date },
				getExtension: {-> "jar" },
				getType: {-> "jar" },
				getFile: {-> jarFile },
				getName: {-> name }
			] as PublishArtifact
		)
    }
    manifest {
        attributes("Main-Class": "com.github.tomakehurst.wiremock.WireMockServerRunner")
    }
}

def releaseDirUrl
def user
def password

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
     archives sourcesJar
     archives javadocJar
}

/*
signing {
    sign configurations.archives
}
*/

if (!this.hasProperty('sonatypeUser')) sonatypeUser = 'default';
if (!this.hasProperty('sonatypePassword')) sonatypePassword = 'default';

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            	authentication(userName: sonatypeUser , password: sonatypePassword)
        	};
        	beforeDeployment { deployment -> signPom(deployment) };
            pom.artifactId = 'wiremock'
            pom.project {
            	packaging 'jar'
            	name 'WireMock'
            	description 'A tool for simulating HTTP services'

            	url 'https://github.com/tomakehurst/wiremock'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                scm {
					connection 'https://tomakehurst@github.com/tomakehurst/wiremock.git'
					developerConnection 'https://tomakehurst@github.com/tomakehurst/wiremock.git'
					url 'https://tomakehurst@github.com/tomakehurst/wiremock.git'
				}

				developers {
					developer {
						id 'tomakehurst'
						name 'Tom Akehurst'
					}
				}
            }

            pom.whenConfigured { thepom ->
            	println thepom.dependencies.findAll({ it.artifactId.equals('junit') || it.scope.equals('test') });
            	thepom.dependencies.removeAll(thepom.dependencies.findAll({ it.artifactId.equals('junit') || it.scope.equals('test') }));
			}
        }
    }
}

task release {
	dependsOn clean, jarAll, uploadArchives
}

task 'set-release-dir' << {
	def console = System.console()
	if (console) {
		println ''
		def releaseDir = console.readLine('> Please enter the full path to the release dir: ')
		println ''
		releaseDirUrl = 'file://' + releaseDir
		if (!releaseDirUrl.endsWith('/')) {
			releaseDirUrl = releaseDirUrl + '/';
		}

		tasks.uploadArchives.repositories.mavenDeployer.repository.url = releaseDirUrl

		println 'Release dir set to: ' + releaseDirUrl
	} else {
		logger.error "Cannot get console."
	}
}

task 'release-to' {
	dependsOn 'set-release-dir', clean, jarAll, uploadArchives
}

task 'add-copyright-headers' << {
	def copyrightNotice = """/*
 * Copyright (C) 2011 Thomas Akehurst
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"""

	def srcDir = new File('src')
	srcDir.eachFileRecurse { file ->
		if (file.name.endsWith(".java") && !file.text.contains(copyrightNotice)) {
			println "Adding copyright header to $file.path"
			def newFileText = copyrightNotice + file.text;
 			file.text = newFileText;
		}
	}
}
